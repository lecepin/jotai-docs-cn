{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/utils/use-update-atom","result":{"data":{"mdx":{"slug":"utils/use-update-atom","frontmatter":{"title":"useUpdateAtom","description":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"useUpdateAtom\",\n  \"published\": false\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar CodeSandbox = makeShortcode(\"CodeSandbox\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u5F15\\u7528: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/issues/26\"\n  }, \"https://github.com/pmndrs/jotai/issues/26\")), mdx(\"p\", null, \"\\u5BF9\\u4E8E\\u8F83\\u65B0\\u7248\\u672C\\u7684 Jotai\\uFF0C\\u60A8\\u4E5F\\u53EF\\u4EE5\\u4F7F\\u7528 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https:/lecepin.github.io/jotai-docs-cn/jotai-docs-cn/docs/api/core.mdx#use-set-atom\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"useSetAtom\")), \" \\u4EE3\\u66FF\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useAtom } from \\\"jotai\\\";\\nimport { useUpdateAtom } from \\\"jotai/utils\\\";\\nconst countAtom = atom(0);\\n\\nconst Counter = () => {\\n  const [count] = useAtom(countAtom);\\n  return <div>count: {count}</div>;\\n};\\n\\nconst Controls = () => {\\n  const setCount = useUpdateAtom(countAtom);\\n  const inc = () => setCount((c) => c + 1);\\n  return <button onClick={inc}>+1</button>;\\n};\\n\")), mdx(CodeSandbox, {\n    id: \"hsyfr\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"ef9149e7-73bc-5a48-8485-132d33d12fe8","slug":"utils/use-update-atom","__params":{"slug":"utils"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}