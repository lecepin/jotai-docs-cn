{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/utils/use-reducer-atom","result":{"data":{"mdx":{"slug":"utils/use-reducer-atom","frontmatter":{"title":"useReducerAtom","description":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"useReducerAtom\"\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar CodeSandbox = makeShortcode(\"CodeSandbox\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom } from 'jotai'\\nimport { useReducerAtom } from 'jotai/utils'\\n\\nconst countReducer = (prev, action) => {\\n  if (action.type === 'inc') return prev + 1\\n  if (action.type === 'dec') return prev - 1\\n  throw new Error('unknown action type')\\n}\\n\\nconst countAtom = atom(0)\\n\\nconst Counter = () => {\\n  const [count, dispatch] = useReducerAtom(countAtom, countReducer)\\n  return (\\n    <div>\\n      {count}\\n      <button onClick={() => dispatch({ type: 'inc' })}>+1</button>\\n      <button onClick={() => dispatch({ type: 'dec' })}>-1</button>\\n    </div>\\n  )\\n}\\n\")), mdx(CodeSandbox, {\n    id: \"eg0mw\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"396c957c-73a3-56f6-b9b9-5f53a7032ced","slug":"utils/use-reducer-atom","__params":{"slug":"utils"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}