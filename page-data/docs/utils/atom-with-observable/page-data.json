{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/utils/atom-with-observable","result":{"data":{"mdx":{"slug":"utils/atom-with-observable","frontmatter":{"title":"atomWithObservable","description":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"atomWithObservable\"\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar CodeSandbox = makeShortcode(\"CodeSandbox\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u5F15\\u7528: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/pmndrs/jotai/pull/341\"\n  }, \"https://github.com/pmndrs/jotai/pull/341\")), mdx(\"h2\", null, \"\\u4F7F\\u7528\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom } from \\\"jotai\\\";\\nimport { atomWithObservable } from \\\"jotai/utils\\\";\\nimport { interval } from \\\"rxjs\\\";\\nimport { map } from \\\"rxjs/operators\\\";\\n\\nconst counterSubject = interval(1000).pipe(map((i) => `#${i}`));\\nconst counterAtom = atomWithObservable(() => counterSubject);\\n\\nconst Counter = () => {\\n  const [counter] = useAtom(counterAtom);\\n  return <div>count: {counter}</div>;\\n};\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithObservable\"), \" \\u51FD\\u6570\\u4ECE rxjs\\uFF08\\u6216\\u7C7B\\u4F3C\\u7684\\uFF09\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subject\"), \" \\u6216 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"observable\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u539F\\u5B50\\u3002\\n\\u5B83\\u7684\\u503C\\u5C06\\u662F\\u4ECE\\u6D41\\u4E2D\\u53D1\\u51FA\\u7684\\u6700\\u540E\\u4E00\\u4E2A\\u503C\\u3002\"), mdx(\"p\", null, \"\\u8981\\u4F7F\\u7528\\u6B64\\u539F\\u5B50\\uFF0C\\u60A8\\u9700\\u8981\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Suspense>\"), \" \\u5305\\u88C5\\u60A8\\u7684\\u7EC4\\u4EF6\\u3002 \\u67E5\\u770B \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../guides/async.mdx\"\n  }, \"guides/async\"), \"\\u3002\"), mdx(\"h2\", null, \"\\u521D\\u59CB\\u503C\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithObservable\"), \" \\u91C7\\u7528\\u7B2C\\u4E8C\\u4E2A\\u53EF\\u9009\\u53C2\\u6570 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{initialValue}\"), \" \\u5141\\u8BB8\\u6307\\u5B9A\\u539F\\u5B50\\u7684\\u521D\\u59CB\\u503C\\u3002 \\u5982\\u679C\\u63D0\\u4F9B\\u4E86 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialValue\"), \"\\uFF0C\\u90A3\\u4E48 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithObservable\"), \" \\u5C06\\u4E0D\\u4F1A\\u6682\\u505C\\uFF0C\\u5E76\\u4E14\\u4F1A\\u5728\\u4ECE observable \\u63A5\\u6536\\u5230\\u7B2C\\u4E00\\u4E2A\\u503C\\u4E4B\\u524D\\u663E\\u793A\\u521D\\u59CB\\u503C\\u3002 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialValue\"), \" \\u53EF\\u4EE5\\u662F\\u4E00\\u4E2A\\u503C\\uFF0C\\u4E5F\\u53EF\\u4EE5\\u662F\\u4E00\\u4E2A\\u8FD4\\u56DE\\u503C\\u7684\\u51FD\\u6570\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const counterAtom = atomWithObservable(() => counterSubject, {\\n  initialValue: 10,\\n});\\n\\nconst counterAtom2 = atomWithObservable(() => counterSubject, {\\n  initialValue: () => Math.random(),\\n});\\n\")), mdx(\"h3\", null, \"Codesandbox\"), mdx(CodeSandbox, {\n    id: \"88pnt\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"77ef2fdf-0b0e-5e74-9990-41103b3c3e54","slug":"utils/atom-with-observable","__params":{"slug":"utils"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}