{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/guides/atoms-in-atom","result":{"data":{"mdx":{"slug":"guides/atoms-in-atom","frontmatter":{"title":"原子中的 Atom","description":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"原子中的 Atom\",\n  \"nav\": 3.08\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atom()\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u539F\\u5B50\\u914D\\u7F6E\\uFF0C\\u5B83\\u662F\\u4E00\\u4E2A\\u5BF9\\u8C61\\uFF0C\\u4F46\\u5B83\\u6CA1\\u6709\\u503C\\u3002\\nAtom \\u914D\\u7F6E\\u6CA1\\u6709\\u5B57\\u7B26\\u4E32\\u952E\\uFF0C\\u6211\\u4EEC\\u7528\\u5F15\\u7528\\u76F8\\u7B49\\u6027\\u6765\\u6807\\u8BC6\\u5B83\\u4EEC\\u3002\\n\\u6362\\u53E5\\u8BDD\\u8BF4\\uFF0C\\u6211\\u4EEC\\u53EF\\u4EE5\\u50CF key \\u4E00\\u6837\\u4F7F\\u7528\\u539F\\u5B50\\u914D\\u7F6E\\u3002\"), mdx(\"h2\", null, \"\\u5728 useState \\u4E2D\\u5B58\\u50A8\\u539F\\u5B50\\u914D\\u7F6E\"), mdx(\"p\", null, \"\\u9996\\u5148\\uFF0C\\u6211\\u4EEC\\u53EF\\u4EE5\\u5728 useState \\u4E2D\\u5B58\\u50A8\\u4E00\\u4E2A\\u539F\\u5B50\\u914D\\u7F6E\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Component = ({ atom1, atom2 }) => {\\n  const [selectedAtom, setSelectedAtom] = useState(atom1);\\n  const [value] = useAtom(selectedAtom);\\n  return (\\n    <div>\\n      Selected value: {value}\\n      <button onClick={() => setSelectedAtom(atom1)}>Select an atom</button>\\n      <button onClick={() => setSelectedAtom(atom2)}>\\n        Select another atom\\n      </button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"p\", null, \"\\u8BF7\\u6CE8\\u610F\\uFF0C\\u6211\\u4EEC\\u53EF\\u4EE5\\u5C06\\u539F\\u5B50\\u914D\\u7F6E\\u4F5C\\u4E3A props \\u4F20\\u9012\\u3002\"), mdx(\"p\", null, \"\\u5B83\\u53EF\\u80FD\\u6CA1\\u6709\\u4EFB\\u4F55\\u610F\\u4E49\\uFF0C\\u4F46\\u6211\\u4EEC\\u53EF\\u4EE5\\u6309\\u9700\\u521B\\u5EFA\\u539F\\u5B50\\u914D\\u7F6E\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Component = () => {\\n  const [currentAtom, setCurrentAtom] = useState(() => atom(0));\\n  const [count, setCount] = useAtom(currentAtom);\\n  return (\\n    <div>\\n      Count: {count} <button onClick={() => setCount((c) => c + 1)}>+1</button>\\n      <button onClick={() => setCurrentAtom(atom(0))}>Create new</button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"h2\", null, \"\\u5728\\u539F\\u5B50\\u4E2D\\u5B58\\u50A8\\u539F\\u5B50\\u914D\\u7F6E\"), mdx(\"p\", null, \"\\u540C\\u6837\\uFF0C\\u6211\\u4EEC\\u53EF\\u4EE5\\u5C06\\u4E00\\u4E2A\\u539F\\u5B50\\u914D\\u7F6E\\u5B58\\u50A8\\u4E3A\\u53E6\\u4E00\\u4E2A\\u539F\\u5B50\\u7684\\u503C\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const firstNameAtom = atom(\\\"Tanjiro\\\");\\nconst lastNameAtom = atom(\\\"Kamado\\\");\\n\\nconst showingNameAtom = atom(firstNameAtom);\\n\\nconst Component = () => {\\n  const [nameAtom, setNameAtom] = useAtom(showingNameAtom);\\n  const [name] = useAtom(nameAtom);\\n  return (\\n    <div>\\n      Name: {name}\\n      <button onClick={() => setNameAtom(firstNameAtom)}>\\n        Show First Name\\n      </button>\\n      <button onClick={() => setNameAtom(lastNameAtom)}>Show Last Name</button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"p\", null, \"\\u53EF\\u4EE5\\u521B\\u5EFA\\u6D3E\\u751F\\u539F\\u5B50\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const derivedNameAtom = atom((get) => {\\n  const nameAtom = get(showingNameAtom);\\n  return get(nameAtom);\\n});\\n\\n// \\u6216\\u8005\\u66F4\\u77ED\\u7684\\u7248\\u672C\\nconst derivedNameAtom = atom((get) => get(get(showingNameAtom)));\\n\")), mdx(\"p\", null, \"\\u4E3A\\u4E86\\u907F\\u514D\\u6DF7\\u6DC6\\u539F\\u5B50\\u4E2D\\u7684\\u5185\\u5BB9\\uFF0C\\u660E\\u786E\\u547D\\u540D\\u539F\\u5B50\\u5F88\\u91CD\\u8981\\u3002\\n\\u6B64\\u5916\\uFF0CTypeScript \\u7C7B\\u578B\\u4FE1\\u606F\\u4E5F\\u4F1A\\u6709\\u6240\\u5E2E\\u52A9\\u3002\"), mdx(\"h2\", null, \"\\u5728\\u539F\\u5B50\\u4E2D\\u5B58\\u50A8\\u539F\\u5B50\\u914D\\u7F6E\\u6570\\u7EC4\"), mdx(\"p\", null, \"\\u6700\\u540E\\uFF0Catom pattern \\u4E2D\\u7684 atom \\u662F\\u5C06\\u4E00\\u4E2A atom config \\u6570\\u7EC4\\u5B58\\u50A8\\u5230\\u4E00\\u4E2A atom \\u4E2D\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const countsAtom = atom([atom(1), atom(2), atom(3)]);\\n\\nconst Counter = ({ countAtom }) => {\\n  const [count, setCount] = useAtom(countAtom);\\n  return (\\n    <div>\\n      {count} <button onClick={() => setCount((c) => c + 1)}>+1</button>\\n    </div>\\n  );\\n};\\n\\nconst Parent = () => {\\n  const [counts, setCounts] = useAtom(countsAtom);\\n  const addNewCount = () => {\\n    const newAtom = atom(0);\\n    setCounts((prev) => [...prev, newAtom]);\\n  };\\n  return (\\n    <div>\\n      {counts.map((countAtom) => (\\n        <Counter countAtom={countAtom} key={countAtom} />\\n      ))}\\n      <button onClick={addNewCount}>Add</button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"p\", null, \"\\u8FD9\\u79CD\\u65B9\\u6CD5\\u7684\\u597D\\u5904\\u662F\\uFF0C\\u5982\\u679C\\u4F60\\u589E\\u52A0\\u4E00\\u4E2A\\u8BA1\\u6570\\uFF0C\\n\\u53EA\\u6709\\u76F8\\u5E94\\u7684 Counter \\u7EC4\\u4EF6\\u91CD\\u65B0\\u6E32\\u67D3\\uFF0C\\u6CA1\\u6709\\u5176\\u4ED6\\u7EC4\\u4EF6\\u91CD\\u65B0\\u6E32\\u67D3\\u3002\"), mdx(\"p\", null, \"\\u91CD\\u8981\\u7684\\u662F\\u8981\\u6CE8\\u610F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"anAtom.toString()\"), \" \\u8FD4\\u56DE\\u4E00\\u4E2A\\u552F\\u4E00\\u7684 id\\uFF0C\\u5B83\\u53EF\\u4EE5\\u7528\\u4F5C map \\u4E2D\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"key\"), \"\\u3002\"), mdx(\"h3\", null, \"\\u7ED9 TypeScript \\u7528\\u6237\\u7684\\u63D0\\u793A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Counter countAtom={countAtom} key={`${countAtom}`} />\\n\")), mdx(\"h2\", null, \"\\u5728\\u539F\\u5B50\\u4E2D\\u5B58\\u50A8\\u539F\\u5B50\\u914D\\u7F6E\\u6620\\u5C04\"), mdx(\"p\", null, \"\\u540C\\u6837\\uFF0C\\u6211\\u4EEC\\u53EF\\u4EE5\\u5B58\\u50A8\\u5BF9\\u8C61\\u6620\\u5C04\\u800C\\u4E0D\\u662F\\u6570\\u7EC4\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const pricesAtom = atom({\\n  apple: atom(15),\\n  orange: atom(12),\\n  pineapple: atom(25),\\n});\\n\\nconst Fruit = ({ name, priceAtom }) => {\\n  const [price] = useAtom(priceAtom);\\n  return (\\n    <div>\\n      {name}: {price}\\n    </div>\\n  );\\n};\\n\\nconst Parent = () => {\\n  const [prices] = useAtom(pricesAtom);\\n  return (\\n    <div>\\n      {Object.keys(prices).map((name) => (\\n        <Fruit name={name} priceAtom={prices[name]} key={name} />\\n      ))}\\n    </div>\\n  );\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"8299b5eb-bbde-58a3-9ca7-4d827ebf78d3","slug":"guides/atoms-in-atom","__params":{"slug":"guides"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}