{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/guides/persistence","result":{"data":{"mdx":{"slug":"guides/persistence","frontmatter":{"title":"持久化","description":"How to persist atoms"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"持久化\",\n  \"description\": \"How to persist atoms\",\n  \"nav\": 3.03\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar CodeSandbox = makeShortcode(\"CodeSandbox\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Jotai \\u5728 utils bundle \\u4E2D\\u6709\\u4E00\\u4E2A \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../api/utils.mdx#atom-with-storage\"\n  }, \"atomWithStorage \\u51FD\\u6570\"), \" \\u7528\\u4E8E\\u6301\\u4E45\\u5316\\uFF0C\\u652F\\u6301\\u5728 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sessionStorage\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \"\\u3001\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AsyncStorage\"), \" \\u6216 URL \\u54C8\\u5E0C\\u4E2D\\u6301\\u4E45\\u5316\\u72B6\\u6001 .\"), mdx(\"p\", null, \"\\u8FD9\\u91CC\\u8FD8\\u6709\\u51E0\\u4E2A\\u66FF\\u4EE3\\u5B9E\\u73B0\\uFF1A\"), mdx(\"h2\", null, \"localStorage \\u7684\\u7B80\\u5355\\u6A21\\u5F0F\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const strAtom = atom(localStorage.getItem(\\\"myKey\\\") ?? \\\"foo\\\");\\n\\nconst strAtomWithPersistence = atom(\\n  (get) => get(strAtom),\\n  (get, set, newStr) => {\\n    set(strAtom, newStr);\\n    localStorage.setItem(\\\"myKey\\\", newStr);\\n  }\\n);\\n\")), mdx(\"h2\", null, \"\\u5177\\u6709 localStorage \\u548C JSON \\u89E3\\u6790\\u7684\\u8F85\\u52A9\\u51FD\\u6570\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const atomWithLocalStorage = (key, initialValue) => {\\n  const getInitialValue = () => {\\n    const item = localStorage.getItem(key);\\n    if (item !== null) {\\n      return JSON.parse(item);\\n    }\\n    return initialValue;\\n  };\\n  const baseAtom = atom(getInitialValue());\\n  const derivedAtom = atom(\\n    (get) => get(baseAtom),\\n    (get, set, update) => {\\n      const nextValue =\\n        typeof update === \\\"function\\\" ? update(get(baseAtom)) : update;\\n      set(baseAtom, nextValue);\\n      localStorage.setItem(key, JSON.stringify(nextValue));\\n    }\\n  );\\n  return derivedAtom;\\n};\\n\")), mdx(\"p\", null, \"\\uFF08\\u5E94\\u6DFB\\u52A0\\u9519\\u8BEF\\u5904\\u7406\\u3002\\uFF09\"), mdx(\"h2\", null, \"\\u5E26\\u6709 AsyncStorage \\u548C JSON \\u89E3\\u6790\\u7684\\u8F85\\u52A9\\u51FD\\u6570\"), mdx(\"p\", null, \"\\u8FD9\\u9700\\u8981 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../api/core.mdx#on-mount\"\n  }, \"onMount\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const atomWithAsyncStorage = (key, initialValue) => {\\n  const baseAtom = atom(initialValue);\\n  baseAtom.onMount = (setValue) => {\\n    (async () => {\\n      const item = await AsyncStorage.getItem(key);\\n      setValue(JSON.parse(item));\\n    })();\\n  };\\n  const derivedAtom = atom(\\n    (get) => get(baseAtom),\\n    (get, set, update) => {\\n      const nextValue =\\n        typeof update === \\\"function\\\" ? update(get(baseAtom)) : update;\\n      set(baseAtom, nextValue);\\n      AsyncStorage.setItem(key, JSON.stringify(nextValue));\\n    }\\n  );\\n  return derivedAtom;\\n};\\n\")), mdx(\"p\", null, \"\\u4E0D\\u8981\\u5FD8\\u8BB0\\u67E5\\u770B \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./async\"\n  }, \"\\u5F02\\u6B65\\u6587\\u6863\"), \" \\u4EE5\\u83B7\\u53D6\\u6709\\u5173\\u5982\\u4F55\\u4F7F\\u7528\\u5F02\\u6B65\\u539F\\u5B50\\u7684\\u66F4\\u591A\\u8BE6\\u7EC6\\u4FE1\\u606F\\u3002\"), mdx(\"h3\", null, \"\\u5728\\u5F02\\u6B65\\u64CD\\u4F5C\\u4E2D\\u7684\\u7528\\u6CD5\"), mdx(\"p\", null, \"\\u4F7F\\u7528\\u5F02\\u6B65\\u5B58\\u50A8\\u65F6\\uFF0C\\u521B\\u5EFA\\u7684\\u539F\\u5B50\\u7684\\u8BFB\\u53D6\\u4E5F\\u662F\\u5F02\\u6B65\\u7684\\u3002 \\u8FD9\\u6709\\u4E00\\u4E9B\\u9650\\u5236\\u3002 \\u5728\\u81F3\\u5C11\\u8C03\\u7528\\u4E00\\u6B21 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useAtom\"), \" \\u4E4B\\u524D\\uFF0C\\u672A\\u8BBE\\u7F6E\\u8BE5\\u503C\\u3002\\n\\u8FD9\\u53EF\\u80FD\\u4F1A\\u5BFC\\u81F4\\u95EE\\u9898\\uFF0C\\u4F8B\\u5982\\uFF0C\\u5982\\u679C\\u60A8\\u60F3\\u5728\\u5F02\\u6B65\\u64CD\\u4F5C\\uFF08\\u53EA\\u5199\\u539F\\u5B50\\uFF09\\u4E2D\\u68C0\\u7D22\\u5B58\\u50A8\\u7684\\u539F\\u5B50\\u7684\\u503C\\u3002\"), mdx(\"p\", null, \"\\u8BA9\\u6211\\u4EEC\\u4F7F\\u7528 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../api/utils.mdx#atom-with-storage\"\n  }, \"utils \\u5305\\u4E2D\\u7684 atomWithStorage \\u51FD\\u6570\"), \" \\u4F5C\\u4E3A\\u793A\\u4F8B\\uFF0C\\u4EE5\\u4FBF\\u6211\\u4EEC\\u6709\\u66F4\\u591A\\u53EF\\u7528\\u9009\\u9879\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithStorage, createJSONStorage } from \\\"jotai/utils\\\";\\n\\nconst storage = createJSONStorage(() => AsyncStorage);\\nconst userId = atomWithStorage(\\\"user-id-key\\\", null, storage);\\nconst userInfo = atom({});\\nconst fetchUserInfo = atom(null, async (get, set, payload: any) => {\\n  const id = get(userId); // This throws an error if \\\"userId\\\" is not loaded yet\\n  const info = await fetch(\\\"https://jotai.org/users/\\\" + id);\\n  set(userInfo, info);\\n});\\n\")), mdx(\"p\", null, \"\\u6211\\u4EEC\\u8981\\u786E\\u4FDD\\u884C\\u52A8\\u6C38\\u8FDC\\u4E0D\\u4F1A\\u5931\\u8D25\\u3002 \\u4E0E Jotai \\u4E2D\\u7684\\u5F02\\u6B65\\u6D41\\u7A0B\\u4E00\\u6837\\uFF0C\\u6211\\u4EEC\\u6709 2 \\u4E2A\\u9009\\u62E9\\uFF1A\\u6709\\u6216\\u6CA1\\u6709 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Suspense\"), \"\\u3002\"), mdx(\"h4\", null, \"Suspense\"), mdx(\"p\", null, \"\\u60A8\\u53EF\\u80FD\\u5E0C\\u671B\\u76F4\\u63A5\\u5728\\u5E94\\u7528\\u7A0B\\u5E8F\\u7684\\u6839\\u7EA7\\u522B\\u9884\\u52A0\\u8F7D\\u539F\\u5B50\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const Preloader = () => {\\n  useAtomValue(userId); // \\u89E6\\u53D1\\u5C06\\u4ECE store \\u52A0\\u8F7D\\u6570\\u636E\\u7684\\u201ConMount\\u201D\\u51FD\\u6570\\n  return null;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Root = () => {\\n  return (\\n    <Suspense fallback={<Text>Hydrating...<Text>}>\\n      <Preloader /> {/* Wait for atoms to preload */}\\n      <App /> {/* Rest of your app */}\\n    </Suspense>\\n  )\\n}\\n\")), mdx(\"h4\", null, \"\\u6CA1\\u6709 Suspense\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// \\u6211\\u4EEC\\u6DFB\\u52A0\\u4E86\\u201CdelayInit: true\\u201D\\u9009\\u9879\\u6765\\u544A\\u8BC9 jotai \\u4E0D\\u8981\\u4F7F\\u7528 Suspense\\nconst storage = { ...createJSONStorage(() => AsyncStorage), delayInit: true };\\nconst userId = atomWithStorage(\\\"user-id-key\\\", null, storage);\\nconst userInfo = atom({});\\nconst fetchUserInfo = atom(null, async (get, set, payload) => {\\n  let id = get(userId);\\n  if (id === null) {\\n    // \\u5982\\u679C\\u5C1A\\u672A\\u52A0\\u8F7D\\u4EFB\\u4F55\\u503C\\uFF0C\\u6211\\u4EEC\\u786E\\u4FDD\\u9884\\u52A0\\u8F7D\\n    id = await AsyncStorage.getItem(\\\"user-id-key\\\");\\n  }\\n  const info = await fetch(\\\"https://jotai.org/users/\\\" + id);\\n  set(userInfo, info);\\n});\\n\")), mdx(\"p\", null, \"\\u4F46\\u6C38\\u8FDC\\u8BB0\\u4F4F jotai \\u662F\\u4E0D\\u62D8\\u4E00\\u683C\\u7684\\uFF0C\\u4F60\\u7684\\u5DE5\\u4F5C\\u6D41\\u7A0B\\u53EF\\u80FD\\u6839\\u672C\\u4E0D\\u9700\\u8981\\u9884\\u52A0\\u8F7D\\u3002\"), mdx(\"hr\", null), mdx(\"h2\", null, \"sessionStorage \\u793A\\u4F8B\"), mdx(\"p\", null, \"\\u4E0E AsyncStorage \\u76F8\\u540C\\uFF0C\\u53EA\\u9700\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithStorage\"), \" util \\u5E76\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sessionStorage\"), \" \\u8986\\u76D6\\u9ED8\\u8BA4\\u5B58\\u50A8\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithStorage, createJSONStorage } from \\\"jotai/utils\\\";\\n\\nconst storage = createJSONStorage(() => sessionStorage);\\nconst someAtom = atomWithStorage(\\\"some-key\\\", someInitialValue, storage);\\n\")), mdx(\"h2\", null, \"\\u5E8F\\u5217\\u5316\\u539F\\u5B50\\u6A21\\u5F0F\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const serializeAtom = atom<\\n  null,\\n  | { type: \\\"serialize\\\"; callback: (value: string) => void }\\n  | { type: \\\"deserialize\\\"; value: string }\\n>(null, (get, set, action) => {\\n  if (action.type === \\\"serialize\\\") {\\n    const obj = {\\n      todos: get(todosAtom).map(get),\\n    };\\n    action.callback(JSON.stringify(obj));\\n  } else if (action.type === \\\"deserialize\\\") {\\n    const obj = JSON.parse(action.value);\\n    // \\u9700\\u8981\\u9519\\u8BEF\\u5904\\u7406\\u548C\\u7C7B\\u578B\\u68C0\\u67E5\\n    set(\\n      todosAtom,\\n      obj.todos.map((todo: Todo) => atom(todo))\\n    );\\n  }\\n});\\n\\nconst Persist = () => {\\n  const [, dispatch] = useAtom(serializeAtom);\\n  const save = () => {\\n    dispatch({\\n      type: \\\"serialize\\\",\\n      callback: (value) => {\\n        localStorage.setItem(\\\"serializedTodos\\\", value);\\n      },\\n    });\\n  };\\n  const load = () => {\\n    const value = localStorage.getItem(\\\"serializedTodos\\\");\\n    if (value) {\\n      dispatch({ type: \\\"deserialize\\\", value });\\n    }\\n  };\\n  return (\\n    <div>\\n      <button onClick={save}>Save to localStorage</button>\\n      <button onClick={load}>Load from localStorage</button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B\"), mdx(CodeSandbox, {\n    id: \"ijyxm\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, \"\\u5E26\\u6709 atomFamily \\u7684\\u6A21\\u5F0F\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const serializeAtom = atom<\\n  null,\\n  | { type: \\\"serialize\\\"; callback: (value: string) => void }\\n  | { type: \\\"deserialize\\\"; value: string }\\n>(null, (get, set, action) => {\\n  if (action.type === \\\"serialize\\\") {\\n    const todos = get(todosAtom);\\n    const todoMap: Record<string, { title: string; completed: boolean }> = {};\\n    todos.forEach((id) => {\\n      todoMap[id] = get(todoAtomFamily({ id }));\\n    });\\n    const obj = {\\n      todos,\\n      todoMap,\\n      filter: get(filterAtom),\\n    };\\n    action.callback(JSON.stringify(obj));\\n  } else if (action.type === \\\"deserialize\\\") {\\n    const obj = JSON.parse(action.value);\\n    // \\u9700\\u8981\\u9519\\u8BEF\\u5904\\u7406\\u548C\\u7C7B\\u578B\\u68C0\\u67E5\\n    set(filterAtom, obj.filter);\\n    obj.todos.forEach((id: string) => {\\n      const todo = obj.todoMap[id];\\n      set(todoAtomFamily({ id, ...todo }), todo);\\n    });\\n    set(todosAtom, obj.todos);\\n  }\\n});\\n\\nconst Persist = () => {\\n  const [, dispatch] = useAtom(serializeAtom);\\n  const save = () => {\\n    dispatch({\\n      type: \\\"serialize\\\",\\n      callback: (value) => {\\n        localStorage.setItem(\\\"serializedTodos\\\", value);\\n      },\\n    });\\n  };\\n  const load = () => {\\n    const value = localStorage.getItem(\\\"serializedTodos\\\");\\n    if (value) {\\n      dispatch({ type: \\\"deserialize\\\", value });\\n    }\\n  };\\n  return (\\n    <div>\\n      <button onClick={save}>Save to localStorage</button>\\n      <button onClick={load}>Load from localStorage</button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B\"), mdx(CodeSandbox, {\n    id: \"eilkg\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"28f335c6-69f7-5620-94ad-27b29235c6eb","slug":"guides/persistence","__params":{"slug":"guides"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}