{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/integrations/immer","result":{"data":{"mdx":{"slug":"integrations/immer","frontmatter":{"title":"Immer","description":"This doc describes Immer integration."},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Immer\",\n  \"description\": \"This doc describes Immer integration.\",\n  \"nav\": 4.01\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar CodeSandbox = makeShortcode(\"CodeSandbox\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"\\u5B89\\u88C5\"), mdx(\"p\", null, \"\\u60A8\\u5FC5\\u987B\\u5B89\\u88C5 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"immer\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-immer\"), \" \\u624D\\u80FD\\u4F7F\\u7528\\u6B64\\u529F\\u80FD\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm install immer jotai-immer\\n# or\\nyarn add immer jotai-immer\\n\")), mdx(\"h2\", null, \"atomWithImmer\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithImmer\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u7C7B\\u4F3C\\u4E8E\\u5E38\\u89C4 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../api/core.mdx#atom\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"atom\")), \" \", \"[atom]\", \" \\u7684\\u65B0\\u539F\\u5B50\\uFF0C\\u4F46\\u5177\\u6709\\u4E0D\\u540C\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \"\\u3002 \\u5728\\u8FD9\\u4E2A bundle \\u4E2D\\uFF0C\\u6211\\u4EEC\\u6CA1\\u6709\\u53EA\\u8BFB\\u539F\\u5B50\\uFF0C\\u56E0\\u4E3A\\u8FD9\\u4E9B\\u51FD\\u6570\\u7684\\u91CD\\u70B9\\u662F immer produce(mutability) \\u51FD\\u6570\\u3002\\nwriteFunction \\u7684\\u7B7E\\u540D\\u662F\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(get, set, update: (draft: Draft<Value>) => void) => void\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom } from \\\"jotai\\\";\\nimport { atomWithImmer } from \\\"jotai-immer\\\";\\n\\nconst countAtom = atomWithImmer(0);\\n\\nconst Counter = () => {\\n  const [count] = useAtom(countAtom);\\n  return <div>count: {count}</div>;\\n};\\n\\nconst Controls = () => {\\n  const [, setCount] = useAtom(countAtom);\\n  // setCount === update : (draft: Draft<Value>) => void\\n  const inc = () => setCount((c) => (c = c + 1));\\n  return <button onClick={inc}>+1</button>;\\n};\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B\"), mdx(\"p\", null, \"\\u7528 atomWithImmer \\u68C0\\u67E5\\u8FD9\\u4E2A\\u4F8B\\u5B50\\uFF1A\"), mdx(CodeSandbox, {\n    id: \"4xnr17\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, \"withImmer\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withImmer\"), \" \\u63A5\\u53D7\\u4E00\\u4E2A\\u539F\\u5B50\\u5E76\\u8FD4\\u56DE\\u4E00\\u4E2A\\u6D3E\\u751F\\u539F\\u5B50\\uFF0C\\u4E0E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithImmer\"), \" \\u4E00\\u6837\\uFF0C\\u5B83\\u6709\\u4E00\\u4E2A\\u4E0D\\u540C\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom, atom } from \\\"jotai\\\";\\nimport { withImmer } from \\\"jotai-immer\\\";\\n\\nconst primitiveAtom = atom(0);\\nconst countAtom = withImmer(primitiveAtom);\\n\\nconst Counter = () => {\\n  const [count] = useAtom(countAtom);\\n  return <div>count: {count}</div>;\\n};\\n\\nconst Controls = () => {\\n  const [, setCount] = useAtom(countAtom);\\n  // setCount === update : (draft: Draft<Value>) => void\\n  const inc = () => setCount((c) => (c = c + 1));\\n  return <button onClick={inc}>+1</button>;\\n};\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B\"), mdx(\"p\", null, \"\\u7528 withImmer \\u68C0\\u67E5\\u8FD9\\u4E2A\\u4F8B\\u5B50\\uFF1A\"), mdx(CodeSandbox, {\n    id: \"9188j1\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, \"useImmerAtom\"), mdx(\"p\", null, \"\\u8FD9\\u4E2A hook \\u63A5\\u53D7\\u4E00\\u4E2A\\u539F\\u5B50\\uFF0C\\u5E76\\u50CF\\u4EE5\\u524D\\u7684 helper \\u4E00\\u6837\\u7528\\u65B0\\u7684\\u7C7B\\u4F3C immer-like \\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \" \\u66FF\\u6362\\u539F\\u5B50\\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \"\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom } from \\\"jotai\\\";\\nimport { useImmerAtom } from \\\"jotai-immer\\\";\\n\\nconst primitiveAtom = atom(0);\\n\\nconst Counter = () => {\\n  const [count] = useImmerAtom(primitiveAtom);\\n  return <div>count: {count}</div>;\\n};\\n\\nconst Controls = () => {\\n  const [, setCount] = useImmerAtom(primitiveAtom);\\n  // setCount === update : (draft: Draft<Value>) => void\\n  const inc = () => setCount((c) => (c = c + 1));\\n  return <button onClick={inc}>+1</button>;\\n};\\n\")), mdx(\"p\", null, \"\\u5982\\u679C\\u60A8\\u4E0D\\u5C06 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withImmer\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithImmer\"), \" \\u4E0E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useImmerAtom\"), \" \\u4E00\\u8D77\\u4F7F\\u7528\\u4F1A\\u66F4\\u597D\\uFF0C\\u56E0\\u4E3A\\u5B83\\u4EEC\\u63D0\\u4F9B\\u4E86\\u7C7B\\u4F3C immer \\u7684 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFunction\"), \" \\u800C\\u6211\\u4EEC\\u4E0D\\u9700\\u8981\\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u7684\\u3002\"), mdx(\"h3\", null, \"\\u4F8B\\u5B50\"), mdx(\"p\", null, \"\\u4F7F\\u7528 useImmerAtom \\u68C0\\u67E5\\u6B64\\u793A\\u4F8B\\uFF1A\"), mdx(CodeSandbox, {\n    id: \"tyivk0\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, \"\\u6F14\\u793A\"), mdx(\"p\", null, \"FIXME: \\u66F4\\u65B0\\u8FD9\\u4E2A\\u6F14\\u793A\"), mdx(CodeSandbox, {\n    id: \"ms9pv\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7377296b-1a97-5823-ba2f-4056f8740818","slug":"integrations/immer","__params":{"slug":"integrations"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}