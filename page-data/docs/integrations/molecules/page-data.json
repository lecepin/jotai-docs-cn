{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/integrations/molecules","result":{"data":{"mdx":{"slug":"integrations/molecules","frontmatter":{"title":"分子","description":"This doc describes molecules integration."},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"分子\",\n  \"description\": \"This doc describes molecules integration.\",\n  \"nav\": 4.11\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar CodeSandbox = makeShortcode(\"CodeSandbox\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Jotai atoms \\u63D0\\u4F9B\\u4E86\\u4F18\\u5316\\u91CD\\u65B0\\u6E32\\u67D3\\u7684\\u57FA\\u672C\\u89E3\\u51B3\\u65B9\\u6848\\u3002\\n\\u5168\\u5C40\\u5B9A\\u4E49\\u7684\\u539F\\u5B50\\u53EF\\u4EE5\\u4F9D\\u8D56\\u4E8E\\u5176\\u4ED6\\u539F\\u5B50\\uFF0C\\u4F46\\u5B83\\u4EEC\\u4E0D\\u80FD\\u4F9D\\u8D56\\u4E8E\\u7EC4\\u4EF6\\u6811\\u4E2D\\u7684\\u5C5E\\u6027\\u548C\\u72B6\\u6001\\u3002\\n\\u53EF\\u4EE5\\u5728\\u7EC4\\u4EF6\\u6811\\u4E2D\\u5B9A\\u4E49\\u539F\\u5B50\\uFF0C\\u4F46\\u662F\\u60A8\\u9700\\u8981\\u4EE5\\u67D0\\u4E9B\\u65B9\\u5F0F\\u4F20\\u9012\\u8FD9\\u4E9B\\u539F\\u5B50\\uFF08\\u4F8B\\u5982\\uFF0C\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../guides/atoms-in-atom.mdx\"\n  }, \"atoms-in-atom\"), \"\\u3002\\uFF09\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/saasquatch/jotai-molecules\"\n  }, \"jotai-molecules\"), \" \\u662F\\u5E2E\\u52A9\\u6B64\\u7C7B\\u7528\\u4F8B\\u7684\\u7B2C\\u4E09\\u65B9\\u5E93\\u3002\"), mdx(\"p\", null, \"\\u6709\\u5173\\u8BE6\\u7EC6\\u4FE1\\u606F\\uFF0C\\u8BF7\\u53C2\\u9605\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/saasquatch/jotai-molecules#motivation\"\n  }, \"\\u52A8\\u673A\"), \"\\u3002\"), mdx(\"h2\", null, \"\\u5B89\\u88C5\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"yarn add jotai-molecules\\n\")), mdx(\"h2\", null, \"Counter \\u793A\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { atom, useAtom } from \\\"jotai\\\";\\nimport {\\n  molecule,\\n  useMolecule,\\n  createScope,\\n  ScopeProvider,\\n} from \\\"jotai-molecules\\\";\\n\\nconst InitialCountScope = createScope(0);\\nconst countMolecule = molecule((getMol, getScope) => {\\n  const initialCont = getScope(InitialCountScope);\\n  return atom(initialCont);\\n});\\n\\nconst Counter = () => {\\n  const countAtom = useMolecule(countMolecule);\\n  const [count, setCount] = useAtom(countAtom);\\n  return (\\n    <div>\\n      {count} <button onClick={() => setCount((c) => c + 1)}>+1</button>\\n    </div>\\n  );\\n};\\n\\nconst App = () => (\\n  <div>\\n    <h1>With initial value 1</h1>\\n    <ScopeProvider scope={InitialCountScope} value={1}>\\n      <Counter />\\n      <Counter />\\n    </ScopeProvider>\\n    <h1>With initial value 2</h1>\\n    <ScopeProvider scope={InitialCountScope} value={2}>\\n      <Counter />\\n      <Counter />\\n    </ScopeProvider>\\n    <h1>Default</h1>\\n    <Counter />\\n    <Counter />\\n  </div>\\n);\\n\")), mdx(CodeSandbox, {\n    id: \"6dvlzf\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"a1084183-a588-58e7-8583-1a41fcb12f38","slug":"integrations/molecules","__params":{"slug":"integrations"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}