{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/integrations/zustand","result":{"data":{"mdx":{"slug":"integrations/zustand","frontmatter":{"title":"Zustand","description":"This doc describes Zustand integration."},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Zustand\",\n  \"description\": \"This doc describes Zustand integration.\",\n  \"nav\": 4.06\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar CodeSandbox = makeShortcode(\"CodeSandbox\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Jotai \\u7684\\u72B6\\u6001\\u9A7B\\u7559\\u5728 React \\u4E2D\\uFF0C\\u4F46\\u6709\\u65F6\\u4E0E React \\u4E4B\\u5916\\u7684\\u4E16\\u754C\\u4EA4\\u4E92\\u4F1A\\u5F88\\u597D\\u3002\"), mdx(\"p\", null, \"Zustand \\u63D0\\u4F9B\\u4E86\\u4E00\\u4E2A store \\u63A5\\u53E3\\uFF0C\\u53EF\\u7528\\u4E8E\\u4FDD\\u5B58\\u4E00\\u4E9B\\u503C\\u5E76\\u4E0E Jotai \\u4E2D\\u7684\\u539F\\u5B50\\u540C\\u6B65\\u3002\"), mdx(\"p\", null, \"\\u8FD9\\u4EC5\\u4F7F\\u7528 zustand \\u7684\\u539F\\u751F api\\u3002\"), mdx(\"h2\", null, \"\\u5B89\\u88C5\"), mdx(\"p\", null, \"\\u60A8\\u5FC5\\u987B\\u5B89\\u88C5 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zustand\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jotai-zustand\"), \" \\u624D\\u80FD\\u4F7F\\u7528\\u6B64\\u529F\\u80FD\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm install zustand jotai-zustand\\n# or\\nyarn add zustand jotai-zustand\\n\")), mdx(\"h2\", null, \"atomWithStore\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithStore\"), \" \\u4F7F\\u7528 zustand store \\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u539F\\u5B50\\u3002\\n\\u5B83\\u662F\\u53CC\\u5411\\u7ED1\\u5B9A\\uFF0C\\u60A8\\u53EF\\u4EE5\\u53CC\\u5411\\u66F4\\u6539\\u503C\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { useAtom } from \\\"jotai\\\";\\nimport { atomWithStore } from \\\"jotai-zustand\\\";\\nimport create from \\\"zustand/vanilla\\\";\\n\\nconst store = create(() => ({ count: 0 }));\\nconst stateAtom = atomWithStore(store);\\nconst Counter = () => {\\n  const [state, setState] = useAtom(stateAtom);\\n\\n  return (\\n    <>\\n      count: {state.count}\\n      <button\\n        onClick={() => setState((prev) => ({ ...prev, count: prev.count + 1 }))}\\n      >\\n        button\\n      </button>\\n    </>\\n  );\\n};\\n\")), mdx(\"h3\", null, \"\\u793A\\u4F8B\"), mdx(CodeSandbox, {\n    id: \"mqtugt\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"acb5845e-7ec8-517e-a03e-dbc27e0d86f6","slug":"integrations/zustand","__params":{"slug":"integrations"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}