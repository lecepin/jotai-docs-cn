{"componentChunkName":"component---src-pages-docs-mdx-slug-js","path":"/docs/advanced-recipes/atom-creators","result":{"data":{"mdx":{"slug":"advanced-recipes/atom-creators","frontmatter":{"title":"创建 Atom","description":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"创建 Atom\",\n  \"nav\": 5.02\n};\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\nvar CodeSandbox = makeShortcode(\"CodeSandbox\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"atomWithToggle\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithToggle\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u65B0\\u7684\\u539F\\u5B50\\uFF0C\\u5B83\\u4EE5\\u4E00\\u4E2A\\u5E03\\u5C14\\u503C\\u4F5C\\u4E3A\\u521D\\u59CB\\u72B6\\u6001\\uFF0C\\u5E76\\u4F7F\\u7528\\u4E00\\u4E2A setter \\u51FD\\u6570\\u6765\\u5207\\u6362\\u5B83\\u3002\")), mdx(\"p\", null, \"\\u8FD9\\u907F\\u514D\\u4E86\\u4E3A\\u4E86\\u66F4\\u65B0\\u7B2C\\u4E00\\u4E2A\\u539F\\u5B50\\u7684\\u72B6\\u6001\\u800C\\u5FC5\\u987B\\u8BBE\\u7F6E\\u53E6\\u4E00\\u4E2A\\u539F\\u5B50\\u7684\\u65B9\\u5F0F\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { WritableAtom, atom } from \\\"jotai\\\";\\n\\nexport function atomWithToggle(\\n  initialValue?: boolean\\n): WritableAtom<boolean, boolean | undefined> {\\n  const anAtom = atom(initialValue, (get, set, nextValue?: boolean) => {\\n    const update = nextValue ?? !get(anAtom);\\n    set(anAtom, update);\\n  });\\n\\n  return anAtom as WritableAtom<boolean, boolean | undefined>;\\n}\\n\")), mdx(\"p\", null, \"\\u53EF\\u4EE5\\u63D0\\u4F9B\\u53EF\\u9009\\u7684\\u521D\\u59CB\\u72B6\\u6001\\u4F5C\\u4E3A\\u7B2C\\u4E00\\u4E2A\\u53C2\\u6570\\u3002\"), mdx(\"p\", null, \"setter \\u51FD\\u6570\\u53EF\\u4EE5\\u6709\\u4E00\\u4E2A\\u53EF\\u9009\\u7684\\u53C2\\u6570\\u6765\\u5F3A\\u5236\\u4E00\\u4E2A\\u7279\\u5B9A\\u7684\\u72B6\\u6001\\uFF0C\\u6BD4\\u5982\\u5982\\u679C\\u4F60\\u60F3\\u4ECE\\u5B83\\u4E2D\\u521B\\u5EFA\\u4E00\\u4E2A setActive \\u51FD\\u6570\\u3002\"), mdx(\"p\", null, \"\\u8FD9\\u662F\\u5B83\\u7684\\u4F7F\\u7528\\u65B9\\u6CD5\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithToggle } from \\\"XXX\\\";\\n\\n// \\u5C06\\u6709\\u4E00\\u4E2A\\u521D\\u59CB\\u503C\\u8BBE\\u7F6E\\u4E3A true\\nconst isActiveAtom = atomWithToggle(true);\\n\")), mdx(\"p\", null, \"\\u5728\\u4E00\\u4E2A\\u7EC4\\u4EF6\\u4E2D\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const Toggle = () => {\\n  const [isActive, toggle] = useAtom(isActiveAtom);\\n\\n  return (\\n    <>\\n      <button onClick={() => toggle()}>\\n        isActive: {isActive ? \\\"yes\\\" : \\\"no\\\"}\\n      </button>\\n      <button onClick={() => toggle(true)}>force true</button>\\n      <button onClick={() => toggle(false)}>force false</button>\\n    </>\\n  );\\n};\\n\")), mdx(\"h2\", null, \"atomWithToggleAndStorage\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithToggleAndStorage\"), \" \\u7C7B\\u4F3C\\u4E8E \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#atom-with-toggle\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"atomWithToggle\")), \"\\uFF0C\\u4F46\\u4E5F\\u53EF\\u4EE5\\u4F7F\\u7528 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../api/utils.mdx#atom-with-storage\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"atomWithStorage\")), \"\\u3002\")), mdx(\"p\", null, \"\\u8FD9\\u662F\\u6765\\u6E90\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { WritableAtom, atom } from \\\"jotai\\\";\\nimport { atomWithStorage } from \\\"jotai/utils\\\";\\n\\nexport function atomWithToggleAndStorage(\\n  key: string,\\n  initialValue?: boolean,\\n  storage?: any\\n): WritableAtom<boolean, boolean | undefined> {\\n  const anAtom = atomWithStorage(key, initialValue, storage);\\n  const derivedAtom = atom(\\n    (get) => get(anAtom),\\n    (get, set, nextValue?: boolean) => {\\n      const update = nextValue ?? !get(anAtom);\\n      set(anAtom, update);\\n    }\\n  );\\n\\n  return derivedAtom;\\n}\\n\")), mdx(\"p\", null, \"\\u4EE5\\u53CA\\u5B83\\u662F\\u5982\\u4F55\\u4F7F\\u7528\\u7684\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithToggleAndStorage } from \\\"XXX\\\";\\n\\n// \\u5C06\\u521D\\u59CB\\u503C\\u8BBE\\u7F6E\\u4E3A false \\u5E76\\u5B58\\u50A8\\u5728 localStorage \\u4E2D\\u7684\\u952E\\u201CisActive\\u201D\\u4E0B\\nconst isActiveAtom = atomWithToggleAndStorage(\\\"isActive\\\");\\n\")), mdx(\"p\", null, \"\\u5728\\u7EC4\\u4EF6\\u4E2D\\u7684\\u7528\\u6CD5\\u4E5F\\u4E0E \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#atom-with-toggle\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"atomWithToggle\")), \" \\u76F8\\u540C\\u3002\"), mdx(\"h2\", null, \"atomWithCompare\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithCompare\"), \" \\u521B\\u5EFA\\u539F\\u5B50\\uFF0C\\u5F53\\u81EA\\u5B9A\\u4E49\\u6BD4\\u8F83\\u51FD\\u6570 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"areEqual(prev, next)\"), \" \\u4E3A\\u5047\\u65F6\\u89E6\\u53D1\\u66F4\\u65B0\\u3002\")), mdx(\"p\", null, \"\\u8FD9\\u53EF\\u4EE5\\u901A\\u8FC7\\u5FFD\\u7565\\u5BF9\\u60A8\\u7684\\u5E94\\u7528\\u7A0B\\u5E8F\\u65E0\\u5173\\u7D27\\u8981\\u7684\\u72B6\\u6001\\u66F4\\u6539\\u6765\\u5E2E\\u52A9\\u60A8\\u907F\\u514D\\u4E0D\\u9700\\u8981\\u7684 re-render\\u3002\"), mdx(\"p\", null, \"\\u6CE8\\u610F\\uFF1AJotai \\u5728\\u5185\\u90E8\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.is\"), \" \\u6765\\u6BD4\\u8F83\\u53D1\\u751F\\u53D8\\u5316\\u65F6\\u7684\\u503C\\u3002 \\u5982\\u679C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"areEqual(a, b)\"), \" \\u8FD4\\u56DE false\\uFF0C\\u4F46 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Object.is(a, b)\"), \" \\u8FD4\\u56DE true\\uFF0C\\u5219 Jotai \\u4E0D\\u4F1A\\u89E6\\u53D1\\u66F4\\u65B0\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { atomWithReducer } from \\\"jotai/utils\\\";\\n\\nexport function atomWithCompare<Value>(\\n  initialValue: Value,\\n  areEqual: (prev: Value, next: Value) => boolean\\n) {\\n  return atomWithReducer(initialValue, (prev: Value, next: Value) => {\\n    if (areEqual(prev, next)) {\\n      return prev;\\n    }\\n\\n    return next;\\n  });\\n}\\n\")), mdx(\"p\", null, \"\\u4EE5\\u4E0B\\u662F\\u60A8\\u5982\\u4F55\\u4F7F\\u7528\\u5B83\\u6765\\u521B\\u5EFA\\u4E00\\u4E2A\\u5FFD\\u7565\\u6D45\\u76F8\\u7B49\\u66F4\\u65B0\\u7684\\u539F\\u5B50\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { atomWithCompare } from \\\"XXX\\\";\\nimport { shallowEquals } from \\\"YYY\\\";\\nimport { CSSProperties } from \\\"react\\\";\\n\\nconst styleAtom = atomWithCompare<CSSProperties>(\\n  { backgroundColor: \\\"blue\\\" },\\n  shallowEquals\\n);\\n\")), mdx(\"p\", null, \"\\u5728\\u4E00\\u4E2A\\u7EC4\\u4EF6\\u4E2D\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const StylePreview = () => {\\n  const [styles, setStyles] = useAtom(styleAtom);\\n\\n  return (\\n    <div>\\n      <div styles={styles}>Style preview</div>\\n\\n      {/* \\u5355\\u51FB\\u6B64\\u6309\\u94AE\\u4E24\\u6B21\\u53EA\\u4F1A\\u89E6\\u53D1\\u4E00\\u6B21\\u6E32\\u67D3 */}\\n      <button onClick={() => setStyles({ ...styles, backgroundColor: \\\"red\\\" })}>\\n        Set background to red\\n      </button>\\n\\n      {/* \\u5355\\u51FB\\u6B64\\u6309\\u94AE\\u4E24\\u6B21\\u53EA\\u4F1A\\u89E6\\u53D1\\u4E00\\u6B21\\u6E32\\u67D3 */}\\n      <button onClick={() => setStyles({ ...styles, fontSize: 32 })}>\\n        Enlarge font\\n      </button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"h2\", null, \"atomWithRefresh\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithRefresh\"), \" \\u901A\\u8FC7\\u4F7F\\u7528\\u66F4\\u65B0\\u51FD\\u6570\\u521B\\u5EFA\\u4E00\\u4E2A\\u53EF\\u4EE5\\u5F3A\\u5236\\u5237\\u65B0\\u7684\\u6D3E\\u751F\\u539F\\u5B50\\u3002\")), mdx(\"p\", null, \"\\u5F53\\u60A8\\u9700\\u8981\\u5728\\u6267\\u884C\\u526F\\u4F5C\\u7528\\u540E\\u5237\\u65B0\\u5F02\\u6B65\\u6570\\u636E\\u65F6\\uFF0C\\u8FD9\\u5F88\\u6709\\u7528\\u3002\"), mdx(\"p\", null, \"\\u5B83\\u8FD8\\u53EF\\u4EE5\\u7528\\u4E8E\\u5B9E\\u73B0\\u201C\\u4E0B\\u62C9\\u5237\\u65B0\\u201D\\u529F\\u80FD\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { atom, Getter } from \\\"jotai\\\";\\n\\nexport function atomWithRefresh<T>(fn: (get: Getter) => T) {\\n  const refreshCounter = atom(0);\\n\\n  return atom(\\n    (get) => {\\n      get(refreshCounter);\\n      return fn(get);\\n    },\\n    (_, set) => set(refreshCounter, (i) => i + 1)\\n  );\\n}\\n\")), mdx(\"p\", null, \"\\u4EE5\\u4E0B\\u662F\\u60A8\\u5C06\\u5982\\u4F55\\u4F7F\\u7528\\u5B83\\u6765\\u5B9E\\u73B0\\u53EF\\u5237\\u65B0\\u7684\\u6570\\u636E\\u6E90\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { atomWithRefresh } from \\\"XXX\\\";\\n\\nconst postsAtom = atomWithRefresh((get) =>\\n  fetch(\\\"https://jsonplaceholder.typicode.com/posts\\\").then((r) => r.json())\\n);\\n\")), mdx(\"p\", null, \"\\u5728\\u4E00\\u4E2A\\u7EC4\\u4EF6\\u4E2D\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const PostsList = () => {\\n  const [posts, refreshPosts] = useAtom(postsAtom);\\n\\n  return (\\n    <div>\\n      <ul>\\n        {posts.map((post) => (\\n          <li key={post.id}>{post.title}</li>\\n        ))}\\n      </ul>\\n\\n      {/* \\u5355\\u51FB\\u6B64\\u6309\\u94AE\\u5C06\\u91CD\\u65B0\\u83B7\\u53D6\\u5E16\\u5B50 */}\\n      <button type=\\\"button\\\" onClick={refreshPosts}>\\n        Refresh posts\\n      </button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"h2\", null, \"atomWithListeners\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithListeners\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u539F\\u5B50\\u548C\\u4E00\\u4E2A hook\\u3002 \\u53EF\\u4EE5\\u8C03\\u7528 hook \\u6765\\u6DFB\\u52A0\\u65B0\\u7684 listener\\u3002 hook \\u5C06\\u56DE\\u8C03\\u4F5C\\u4E3A\\u53C2\\u6570\\uFF0C\\u6BCF\\u6B21\\u8BBE\\u7F6E\\u539F\\u5B50\\u503C\\u65F6\\u90FD\\u4F1A\\u8C03\\u7528\\u8BE5\\u56DE\\u8C03\\u3002 \\u8BE5 hook \\u8FD8\\u8FD4\\u56DE\\u4E00\\u4E2A\\u51FD\\u6570\\u6765\\u79FB\\u9664 listener\\u3002\")), mdx(\"p\", null, \"\\u5F53\\u60A8\\u60F3\\u8981\\u521B\\u5EFA\\u4E00\\u4E2A\\u53EF\\u4EE5\\u76D1\\u542C\\u539F\\u5B50\\u72B6\\u6001\\u4F55\\u65F6\\u53D1\\u751F\\u53D8\\u5316\\u7684\\u7EC4\\u4EF6\\u65F6\\uFF0C\\u8FD9\\u4F1A\\u5F88\\u6709\\u7528\\uFF0C\\u800C\\u4E0D\\u5FC5\\u5728\\u6BCF\\u6B21\\u72B6\\u6001\\u66F4\\u6539\\u65F6\\u90FD\\u91CD\\u65B0\\u6E32\\u67D3\\u8BE5\\u7EC4\\u4EF6\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import { useEffect } from \\\"react\\\";\\nimport { atom, Getter, Setter, SetStateAction } from \\\"jotai\\\";\\nimport { useUpdateAtom } from \\\"jotai/utils\\\";\\n\\ntype Callback<Value> = (\\n  get: Getter,\\n  set: Setter,\\n  newVal: Value,\\n  prevVal: Value\\n) => void;\\n\\nexport function atomWithListeners<Value>(initialValue: Value) {\\n  const baseAtom = atom(initialValue);\\n  const listenersAtom = atom(<Callback<Value>[]>[]);\\n  const anAtom = atom(\\n    (get) => get(baseAtom),\\n    (get, set, arg: SetStateAction<Value>) => {\\n      const prevVal = get(baseAtom);\\n      set(baseAtom, arg);\\n      const newVal = get(baseAtom);\\n      get(listenersAtom).forEach((callback) => {\\n        callback(get, set, newVal, prevVal);\\n      });\\n    }\\n  );\\n  const useListener = (callback: Callback<Value>) => {\\n    const setListeners = useUpdateAtom(listenersAtom);\\n    useEffect(() => {\\n      setListeners((prev) => [...prev, callback]);\\n      return () =>\\n        setListeners((prev) => {\\n          const index = prev.indexOf(callback);\\n          return [...prev.slice(0, index), ...prev.slice(index + 1)];\\n        });\\n    }, [setListeners, callback]);\\n  };\\n  return [anAtom, useListener] as const;\\n}\\n\")), mdx(\"p\", null, \"\\u5728\\u4E00\\u4E2A\\u7EC4\\u4EF6\\u4E2D\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [countAtom, useCountListener] = atomWithListeners(0);\\n\\nfunction EvenCounter() {\\n  const [evenCount, setEvenCount] = useState(0);\\n\\n  useCountListener(\\n    useCallback(\\n      (get, set, newVal, prevVal) => {\\n        // \\u6BCF\\u6B21\\u8BBE\\u7F6E `countAtom` \\u7684\\u503C\\u65F6\\uFF0C\\u6211\\u4EEC\\u68C0\\u67E5\\u5B83\\u7684\\u65B0\\u503C\\u662F\\u5426\\u4E3A\\u5076\\u6570\\n        // \\u5982\\u679C\\u662F\\uFF0C\\u6211\\u4EEC\\u589E\\u52A0 `evenCount`\\u3002\\n        if (newVal % 2 === 0) {\\n          setEvenCount((c) => c + 1);\\n        }\\n      },\\n      [setEvenCount]\\n    )\\n  );\\n\\n  return <>Count was set to an even number {evenCount} times.</>;\\n}\\n\")), mdx(\"h2\", null, \"atomWithBroadcast\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithBroadcast\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u539F\\u5B50\\u3002 \\u539F\\u5B50\\u5C06\\u5728\\u6D4F\\u89C8\\u5668\\u9009\\u9879\\u5361\\u548C\\u6846\\u67B6\\u4E4B\\u95F4\\u5171\\u4EAB\\uFF0C\\u7C7B\\u4F3C\\u4E8E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithStorage\"), \" \\u4F46\\u5177\\u6709\\u521D\\u59CB\\u5316\\u9650\\u5236\\u3002\")), mdx(\"p\", null, \"\\u5F53\\u60A8\\u5E0C\\u671B\\u72B6\\u6001\\u5728\\u4E0D\\u4F7F\\u7528 localStorage \\u7684\\u60C5\\u51B5\\u4E0B\\u76F8\\u4E92\\u4EA4\\u4E92\\u5E76\\u4E14\\u4EC5\\u4F7F\\u7528 Broadcast Channel API \\u5141\\u8BB8\\u6D4F\\u89C8\\u4E0A\\u4E0B\\u6587\\uFF08\\u5373\\u7A97\\u53E3\\u3001\\u9009\\u9879\\u5361\\u3001\\u6846\\u67B6\\u3001\\u521B\\u5EFA\\u7EC4\\u4EF6\\u6216 iframe\\uFF09\\u4E4B\\u95F4\\u8FDB\\u884C\\u57FA\\u672C\\u901A\\u4FE1\\u65F6\\uFF0C\\u8FD9\\u53EF\\u80FD\\u5F88\\u6709\\u7528 \\u548C\\u540C\\u6E90\\u7684 worker\\u3002 \\u6839\\u636E MDN \\u6587\\u6863\\uFF0C\\u5E7F\\u64AD\\u4E0D\\u652F\\u6301\\u5728\\u521D\\u59CB\\u5316\\u4E2D\\u63A5\\u6536\\u6D88\\u606F\\uFF0C\\u5982\\u679C\\u6211\\u4EEC\\u60F3\\u8981\\u652F\\u6301\\uFF0C\\u6211\\u4EEC\\u53EF\\u80FD\\u9700\\u8981\\u5411 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithBroadcast\"), \" \\u6DFB\\u52A0\\u989D\\u5916\\u7684\\u4E1C\\u897F\\uFF08\\u6BD4\\u5982\\u672C\\u5730\\u5B58\\u50A8\\uFF09\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { atom } from \\\"jotai\\\";\\n\\nexport function atomWithBroadcast<Value>(key: string, initialValue: Value) {\\n  const baseAtom = atom(initialValue);\\n  const listeners = new Set<(event: MessageEvent<any>) => void>();\\n  const channel = new BroadcastChannel(key);\\n  channel.onmessage = (event) => {\\n    listeners.forEach((l) => l(event));\\n  };\\n\\n  const broadcastAtom = atom<Value, { isEvent: boolean; value: Value }>(\\n    (get) => get(baseAtom),\\n    (get, set, update) => {\\n      set(baseAtom, update.value);\\n\\n      if (!update.isEvent) {\\n        channel.postMessage(get(baseAtom));\\n      }\\n    }\\n  );\\n  broadcastAtom.onMount = (setAtom) => {\\n    const listener = (event: MessageEvent<any>) => {\\n      setAtom({ isEvent: true, value: event.data });\\n    };\\n    listeners.add(listener);\\n    return () => {\\n      listeners.delete(listener);\\n    };\\n  };\\n  const returnedAtom = atom<Value, Value>(\\n    (get) => get(broadcastAtom),\\n    (get, set, update) => {\\n      set(broadcastAtom, { isEvent: false, value: update });\\n    }\\n  );\\n  return returnedAtom;\\n}\\nconst broadAtom = atomWithBroadcast(\\\"count\\\", 0);\\n\\nconst ListOfThings = () => {\\n  const [count, setCount] = useAtom(broadAtom);\\n\\n  return (\\n    <div>\\n      {count}\\n      <button onClick={() => setCount(count + 1)}>+1</button>\\n    </div>\\n  );\\n};\\n\")), mdx(CodeSandbox, {\n    id: \"ugkzm0\",\n    mdxType: \"CodeSandbox\"\n  }), mdx(\"h2\", null, \"atomWithDebounce\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"atomWithDebounce\"), \" \\u521B\\u5EFA\\u4E00\\u4E2A\\u9632\\u6296\\u72B6\\u6001\\u96C6\\u7684\\u539F\\u5B50\\u3002\")), mdx(\"p\", null, \"\\u6B64 utils \\u5BF9\\u4E8E\\u6587\\u672C\\u641C\\u7D22\\u8F93\\u5165\\u5F88\\u6709\\u7528\\uFF0C\\u60A8\\u5E0C\\u671B\\u5728\\u7B49\\u5F85\\u4E00\\u6BB5\\u65F6\\u95F4\\u540E \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u4EC5\\u8C03\\u7528\\u4E00\\u6B21\\u6D3E\\u751F\\u539F\\u5B50\\u4E2D\\u7684\\u51FD\\u6570\"), \"\\uFF0C\\u800C\\u4E0D\\u662F\\u5728\\u6BCF\\u6B21\\u51FB\\u952E\\u65F6\\u89E6\\u53D1\\u64CD\\u4F5C\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { atom, SetStateAction } from \\\"jotai\\\";\\n\\nexport default function atomWithDebounce<T>(\\n  initialValue: T,\\n  delayMilliseconds = 500,\\n  shouldDebounceOnReset = false\\n) {\\n  const prevTimeoutAtom = atom<ReturnType<typeof setTimeout> | undefined>(\\n    undefined\\n  );\\n\\n  // \\u4E0D\\u8981\\u5BFC\\u51FA currentValueAtom\\uFF0C\\u56E0\\u4E3A\\u4F7F\\u7528\\u6B64\\u539F\\u5B50\\u8BBE\\u7F6E\\u72B6\\u6001\\u4F1A\\u5BFC\\u81F4 currentValueAtom \\u548C debouncedValueAtom \\u4E4B\\u95F4\\u7684\\u72B6\\u6001\\u4E0D\\u4E00\\u81F4\\n  const _currentValueAtom = atom(initialValue);\\n  const isDebouncingAtom = atom(false);\\n\\n  const debouncedValueAtom = atom(\\n    initialValue,\\n    (get, set, update: SetStateAction<T>) => {\\n      clearTimeout(get(prevTimeoutAtom));\\n\\n      const prevValue = get(_currentValueAtom);\\n      const nextValue =\\n        typeof update === \\\"function\\\"\\n          ? (update as (prev: T) => T)(prevValue)\\n          : update;\\n\\n      const onDebounceStart = () => {\\n        set(_currentValueAtom, nextValue);\\n        set(isDebouncingAtom, true);\\n      };\\n\\n      const onDebounceEnd = () => {\\n        set(debouncedValueAtom, nextValue);\\n        set(isDebouncingAtom, false);\\n      };\\n\\n      onDebounceStart();\\n\\n      if (!shouldDebounceOnReset && nextValue === initialValue) {\\n        onDebounceEnd();\\n        return;\\n      }\\n\\n      const nextTimeoutId = setTimeout(() => {\\n        onDebounceEnd();\\n      }, delayMilliseconds);\\n\\n      // \\u8BBE\\u7F6E\\u4E0A\\u4E00\\u4E2A\\u8D85\\u65F6\\u539F\\u5B50\\u4EE5\\u9632\\u9700\\u8981\\u6E05\\u9664\\n      set(prevTimeoutAtom, nextTimeoutId);\\n    }\\n  );\\n\\n  // \\u5BFC\\u51FA\\u539F\\u5B50 setter \\u4EE5\\u5728\\u9700\\u8981\\u65F6\\u6E05\\u9664\\u8D85\\u65F6\\n  const clearTimeoutAtom = atom(null, (get, set, _arg) => {\\n    clearTimeout(get(prevTimeoutAtom));\\n    set(isDebouncingAtom, false);\\n  });\\n\\n  return {\\n    currentValueAtom: atom((get) => get(_currentValueAtom)),\\n    isDebouncingAtom,\\n    clearTimeoutAtom,\\n    debouncedValueAtom,\\n  };\\n}\\n\")), mdx(\"h3\", null, \"\\u8B66\\u544A\"), mdx(\"p\", null, \"\\u8BF7\\u6CE8\\u610F\\uFF0C\\u6B64\\u539F\\u5B50\\u4E0E React 18 \\u4E2D\\u7684\\u5E76\\u53D1\\u529F\\u80FD\\uFF08\\u4F8B\\u5982 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useTransition\"), \" \\u548C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useDeferredValue\"), \" \\uFF09\\u5177\\u6709\\u4E0D\\u540C\\u7684\\u76EE\\u6807\\uFF0C\\u5B83\\u4EEC\\u7684\\u4E3B\\u8981\\u76EE\\u7684\\u662F\\u9632\\u6B62\\u963B\\u585E\\u4E0E\\u9875\\u9762\\u7684\\u4EA4\\u4E92\\u4EE5\\u8FDB\\u884C\\u6602\\u8D35\\u7684\\u66F4\\u65B0\\u3002\"), mdx(\"p\", null, \"\\u6709\\u5173\\u8BE6\\u7EC6\\u4FE1\\u606F\\uFF0C\\u8BF7\\u9605\\u8BFB\\u6807\\u9898\\u4E3A\\u201C\\u5B83\\u4E0E setTimeout \\u6709\\u4F55\\u4E0D\\u540C\\uFF1F\\u201D\\u90E8\\u5206\\u4E0B\\u7684\\u6B64 github \\u8BA8\\u8BBA \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/reactwg/react-18/discussions/41\"\n  }, \"https://github.com/reactwg/react-18/discussions/41\")), mdx(\"h3\", null, \"\\u793A\\u4F8B\"), mdx(\"p\", null, \"\\u4E0B\\u9762\\u7684\\u6C99\\u7BB1\\u94FE\\u63A5\\u663E\\u793A\\u4E86\\u6211\\u4EEC\\u5982\\u4F55\\u4F7F\\u7528\\u6D3E\\u751F\\u539F\\u5B50\\u6839\\u636E \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"debouncedValueAtom\"), \" \\u7684\\u503C\\u83B7\\u53D6\\u72B6\\u6001\\u3002\"), mdx(\"p\", null, \"\\u5F53\\u5728 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<SearchInput>\"), \" \\u4E2D\\u8F93\\u5165\\u4E00\\u4E2A pokemon \\u7684\\u540D\\u5B57\\u65F6\\uFF0C\\u6211\\u4EEC\\u4E0D\\u4F1A\\u5BF9\\u6BCF\\u4E2A\\u5B57\\u6BCD\\u53D1\\u9001 get \\u8BF7\\u6C42\\uFF0C\\u800C\\u662F\\u4EC5\\u5728\\u81EA\\u4E0A\\u6B21\\u8F93\\u5165\\u6587\\u672C\\u540E\\u7ECF\\u8FC7 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delayMilliseconds\"), \" \\u4E4B\\u540E\\u3002\"), mdx(\"p\", null, \"\\u8FD9\\u51CF\\u5C11\\u4E86\\u5BF9\\u670D\\u52A1\\u5668\\u7684\\u540E\\u7AEF\\u8BF7\\u6C42\\u6570\\u3002\"), mdx(CodeSandbox, {\n    id: \"cjrz2y\",\n    mdxType: \"CodeSandbox\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"ec5d7e6f-8e04-5dca-920d-a4b2aea75092","slug":"advanced-recipes/atom-creators","__params":{"slug":"advanced-recipes"}}},"staticQueryHashes":["171421096","4167841181","930225796"]}