{"version":3,"file":"component---src-pages-index-js-b58f5de505c0e1bbe0fd.js","mappings":"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","sources":["webpack://jotai-website/./src/components/intro.js","webpack://jotai-website/./src/demos/core.js","webpack://jotai-website/./src/components/client-only.js","webpack://jotai-website/./src/demos/utilities.js","webpack://jotai-website/./src/demos/integrations.js","webpack://jotai-website/./src/pages/index.js"],"sourcesContent":["import { Jotai } from '../components';\n\nexport const Intro = () => {\n  return (\n    <header>\n      <Jotai className=\"max-w-xs lg:hidden\" />\n      <div className=\"mt-8 flex items-center space-x-4 sm:space-x-8 sm:px-16 lg:mt-0 lg:px-0\">\n        <img\n          src=\"https://storage.googleapis.com/candycode/jotai/jotai-mascot.png\"\n          className=\"w-1/3 max-w-[215px] lg:w-1/4\"\n          title=\"Jotai mascot\"\n          alt=\"Jotai mascot\"\n        />\n        <div className=\"speech-bubble relative w-2/3 space-y-4 rounded-xl bg-gray-100 p-4 text-sm leading-snug text-gray-700 dark:bg-gray-900 dark:text-gray-300 sm:text-base md:text-lg lg:w-3/4 lg:p-8 lg:leading-normal\">\n          <div>\n            没有额外的重新渲染，状态驻留在 React 中，您可以从 Suspense 和并发功能中获得全部好处。\n          </div>\n          <div>\n            它可以从简单的 React.useState 替代品扩展到具有复杂需求的大型应用程序。\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n","import { useAtom } from 'jotai';\nimport { textAtom, uppercaseAtom } from '../atoms';\nimport { Code } from '../components';\n\nexport const CoreDemo = () => {\n  const Input = () => {\n    const [text, setText] = useAtom(textAtom);\n\n    return (\n      <input\n        value={text}\n        onChange={(event) => setText(event.target.value)}\n        className=\"w-full bg-transparent focus:!ring-transparent\"\n      />\n    );\n  };\n\n  const Uppercase = () => {\n    const [uppercase] = useAtom(uppercaseAtom);\n\n    return <span className=\"flex-shrink-0 font-bold\">{uppercase}</span>;\n  };\n\n  const code = `import { atom, useAtom } from 'jotai'\n\n// 创建你的原子和衍生物\nconst textAtom = atom('hello')\nconst uppercaseAtom = atom(\n  (get) => get(textAtom).toUpperCase()\n)\n\n// 在您的应用程序中的任何位置使用它们\nconst Input = () => {\n  const [text, setText] = useAtom(textAtom)\n  const handleChange = (e) => setText(e.target.value)\n  return (\n    <input value={text} onChange={handleChange} />\n  )\n}\n\nconst Uppercase = () => {\n  const [uppercase] = useAtom(uppercaseAtom)\n  return (\n    <div>Uppercase: {uppercase}</div>\n  )\n}\n\n// 现在你有了组件\nconst App = () => {\n  return (\n    <>\n      <Input />\n      <Uppercase />\n    </>\n  )\n}`;\n\n  return (\n    <>\n      <div className=\"py-8 text-sm\">\n        <div className=\"flex items-center rounded-lg border border-gray-300 bg-white px-4 py-2 text-lg focus-within:ring focus-within:ring-blue-400 dark:border-gray-800 dark:bg-gray-950 dark:focus-within:ring-teal-700\">\n          <Input />\n          <Uppercase />\n        </div>\n      </div>\n      <Code>{code}</Code>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nexport const ClientOnly = ({ children }) => {\n  const [hasMounted, setHasMounted] = useState(false);\n\n  useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\n  if (!hasMounted) {\n    return null;\n  }\n\n  return children;\n};\n","import cx from 'classnames';\nimport { useAtom } from 'jotai';\nimport { darkModeAtom } from '../atoms';\nimport { ClientOnly, Code } from '../components';\n\nexport const UtilitiesDemo = () => {\n  const [darkMode, setDarkMode] = useAtom(darkModeAtom);\n\n  const code = `import { useAtom } from 'jotai'\nimport { atomWithStorage } from 'jotai/utils'\n\n// 设置字符串键和初始值\nconst darkModeAtom = atomWithStorage('darkMode', false)\n\nconst Page = () => {\n  // 像任何其他原子一样使用持久化状态\n  const [darkMode, setDarkMode] = useAtom(darkModeAtom)\n  const toggleDarkMode = () => setDarkMode(!darkMode)\n  return (\n    <>\n      <h1>Welcome to {darkMode ? 'dark' : 'light'} mode!</h1>\n      <button onClick={toggleDarkMode}>toggle theme</button>\n    </>\n  )\n}`;\n\n  return (\n    <>\n      <div className=\"py-8\">\n        <ClientOnly>\n          <div\n            className={cx(\n              darkMode ? 'bg-gray-900 text-gray-100' : 'bg-gray-100 text-gray-900',\n              'flex items-center space-x-4 rounded-xl p-4 transition duration-300 ease-in-out lg:space-x-8 lg:p-8',\n            )}\n          >\n            <div>\n              <button\n                onClick={() => setDarkMode(!darkMode)}\n                className={cx(\n                  darkMode ? 'bg-gray-700' : 'bg-gray-300',\n                  'dark:focus-teal-700 relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-opacity duration-200 ease-in-out focus:outline-none focus:ring focus:ring-blue-400',\n                )}\n              >\n                <span\n                  className={cx(\n                    darkMode ? 'translate-x-5' : 'translate-x-0',\n                    'pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out',\n                  )}\n                  aria-hidden=\"true\"\n                />\n              </button>\n            </div>\n            <div className=\"text-sm leading-relaxed lg:text-lg\">\n              此切换将通过 localStorage 在用户会话之间保留。\n            </div>\n          </div>\n        </ClientOnly>\n      </div>\n      <Code>{code}</Code>\n    </>\n  );\n};\n","import { useAtom } from 'jotai';\nimport { countAtom } from '../atoms';\nimport { Button, Code } from '../components';\n\nexport const IntegrationsDemo = () => {\n  const [count, setCount] = useAtom(countAtom);\n\n  const increment = () => setCount((c) => (c = c + 1));\n\n  const code = `import { useAtom } from 'jotai'\nimport { atomWithImmer } from 'jotai/immer'\n\n// 使用基于 immer 的写入函数创建一个新原子\nconst countAtom = atomWithImmer(0)\n\nconst Counter = () => {\n  const [count] = useAtom(countAtom)\n  return (\n    <div>count: {count}</div>\n  )\n}\n\nconst Controls = () => {\n  // setCount === update: (draft: Draft<Value>) => void\n  const [, setCount] = useAtom(countAtom)\n  const increment = () => setCount((c) => (c = c + 1))\n  return (\n    <button onClick={increment}>+1</button>\n  )\n}`;\n\n  return (\n    <>\n      <div className=\"flex items-center space-x-8 pt-4 lg:pt-8 lg:pb-4\">\n        <Button onClick={increment} icon=\"plus\" className=\"focus:ring\">\n          Increment\n        </Button>\n        <span className=\"text-3xl font-bold ordinal slashed-zero tabular-nums\">{count}</span>\n      </div>\n      <Code>{code}</Code>\n    </>\n  );\n};\n","import { InlineCode, Intro, Layout, Meta } from '../components';\nimport { CoreDemo, IntegrationsDemo, UtilitiesDemo } from '../demos';\n\nexport default function HomePage() {\n  return (\n    <Layout>\n      <Intro />\n      <div className=\"mt-8 space-y-8 lg:mt-16 lg:space-y-16\">\n        <section>\n          <h2>介绍</h2>\n          <p>\n            Jotai 受 Recoil 启发的原子模型采用自下而上的方法来进行 React 状态管理。 可以通过组合原子来构建状态，并且渲染基于原子依赖性进行优化。 这解决了 React 上下文的额外重新渲染问题，并消除了对 memoization 技术的需要。\n          </p>\n        </section>\n        <section>\n          <h2>核心 API</h2>\n          <p>\n            Jotai 有一个非常小的 API，并且是面向 TypeScript 的。 它与 React 的集成 <InlineCode>useState</InlineCode> hook 一样简单易用，但所有状态都是全局可访问的，派生状态易于实现，并且自动消除了额外的重新渲染。\n          </p>\n          <CoreDemo />\n        </section>\n        <section>\n          <h2>额外的 utilities</h2>\n          <p>\n            Jotai 包还包括一个 <InlineCode>jotai/utils</InlineCode> 包。 这些函数增加了对在 localStorage（或 URL 哈希）中保留原子状态、在服务器端渲染期间混合原子状态、创建具有 set 函数（包括类似 Redux 的 reducers 和 action 类型）的原子等等的支持！\n          </p>\n          <UtilitiesDemo />\n        </section>\n        <section>\n          <h2>第三方集成</h2>\n          <p>\n            每个官方第三方集成还有额外的捆绑包。 Immer、Optics、Query、XState、Valtio、Zustand、Redux 和 URQL。\n          </p>\n          <p>\n            一些集成提供了具有备用集合函数的新原子类型，例如  <InlineCode>atomWithImmer</InlineCode>，而其他集成则提供了具有与其他状态管理库的双向数据绑定的新原子类型，例如与 Redux 存储绑定的 <InlineCode>atomWithStore</InlineCode>。\n          </p>\n          <IntegrationsDemo />\n        </section>\n        <section>\n          <h2>学习更多</h2>\n          <p>查看 Jotai 的创建者 Daishi 的免费 Egghead 课程。</p>\n          <a\n            href=\"https://egghead.io/courses/manage-application-state-with-jotai-atoms-2c3a29f0\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"mt-4 block\"\n          >\n            <img\n              src=\"https://storage.googleapis.com/candycode/jotai/jotai-course-banner.jpg\"\n              className=\"block rounded-md shadow-lg dark:!shadow-none sm:rounded-lg\"\n              alt=\"Jotai course\"\n              title=\"Jotai course\"\n            />\n          </a>\n        </section>\n      </div>\n    </Layout>\n  );\n}\n\nexport const Head = () => {\n  return <Meta />;\n};\n"],"names":["Intro","className","src","title","alt","CoreDemo","Input","useAtom","textAtom","text","setText","value","onChange","event","target","Uppercase","uppercase","uppercaseAtom","ClientOnly","children","useState","hasMounted","setHasMounted","useEffect","UtilitiesDemo","darkModeAtom","darkMode","setDarkMode","cx","onClick","IntegrationsDemo","countAtom","count","setCount","c","icon","HomePage","href","rel","Head"],"sourceRoot":""}